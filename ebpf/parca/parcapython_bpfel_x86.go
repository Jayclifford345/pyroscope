// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package parca

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ParcaPythonInterpreterInfo struct {
	ThreadStateAddr      uint64
	PyVersionOffsetIndex uint32
	_                    [4]byte
}

type ParcaPythonPythonVersionOffsets struct {
	MajorVersion uint32
	MinorVersion uint32
	PatchVersion uint32
	_            [4]byte
	PyCframe     struct{ CurrentFrame int64 }
	PyCodeObject struct {
		CoFilename    int64
		CoName        int64
		CoVarnames    int64
		CoFirstlineno int64
	}
	PyFrameObject struct {
		F_back       int64
		F_code       int64
		F_lineno     int64
		F_localsplus int64
	}
	PyInterpreterState struct{ TstateHead int64 }
	PyObject           struct{ ObType int64 }
	PyRuntimeState     struct{ InterpMain int64 }
	PyString           struct {
		Data int64
		Size int64
	}
	PyThreadState struct {
		Next           int64
		Interp         int64
		Frame          int64
		ThreadId       int64
		NativeThreadId int64
		Cframe         int64
	}
	PyTupleObject struct{ ObItem int64 }
	PyTypeObject  struct{ TpName int64 }
}

type ParcaPythonStackCountKeyT struct {
	Pid                int32
	Tgid               int32
	UserStackId        uint64
	KernelStackId      uint64
	InterpreterStackId uint64
}

type ParcaPythonStackTraceT struct {
	Len       uint64
	Addresses [127]uint64
}

type ParcaPythonState struct {
	InterpreterInfo          ParcaPythonInterpreterInfo
	ThreadState              uint64
	CurrentPthread           uint64
	FramePtr                 uint64
	StackWalkerProgCallCount int32
	_                        [4]byte
	Sample                   struct {
		Pid         uint32
		Tid         uint32
		StackStatus uint32
		_           [4]byte
		Stack       ParcaPythonStackTraceT
	}
}

type ParcaPythonSymbolT struct {
	ClassName  [32]int8
	MethodName [64]int8
	Path       [128]int8
}

type ParcaPythonUnwindStateT struct {
	Ip              uint64
	Sp              uint64
	Bp              uint64
	TailCalls       uint32
	_               [4]byte
	Stack           ParcaPythonStackTraceT
	UnwindingJit    bool
	UseFp           bool
	_               [6]byte
	InterpreterType uint64
	StackKey        ParcaPythonStackCountKeyT
}

// LoadParcaPython returns the embedded CollectionSpec for ParcaPython.
func LoadParcaPython() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ParcaPythonBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ParcaPython: %w", err)
	}

	return spec, err
}

// LoadParcaPythonObjects loads ParcaPython and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ParcaPythonObjects
//	*ParcaPythonPrograms
//	*ParcaPythonMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadParcaPythonObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadParcaPython()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ParcaPythonSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ParcaPythonSpecs struct {
	ParcaPythonProgramSpecs
	ParcaPythonMapSpecs
}

// ParcaPythonSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ParcaPythonProgramSpecs struct {
	UnwindPythonStack *ebpf.ProgramSpec `ebpf:"unwind_python_stack"`
	WalkPythonStack   *ebpf.ProgramSpec `ebpf:"walk_python_stack"`
}

// ParcaPythonMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ParcaPythonMapSpecs struct {
	GlobalState            *ebpf.MapSpec `ebpf:"global_state"`
	Heap                   *ebpf.MapSpec `ebpf:"heap"`
	PidToInterpreterInfo   *ebpf.MapSpec `ebpf:"pid_to_interpreter_info"`
	Programs               *ebpf.MapSpec `ebpf:"programs"`
	StackCounts            *ebpf.MapSpec `ebpf:"stack_counts"`
	StackTraces            *ebpf.MapSpec `ebpf:"stack_traces"`
	SymbolIndexStorage     *ebpf.MapSpec `ebpf:"symbol_index_storage"`
	SymbolTable            *ebpf.MapSpec `ebpf:"symbol_table"`
	VersionSpecificOffsets *ebpf.MapSpec `ebpf:"version_specific_offsets"`
}

// ParcaPythonObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadParcaPythonObjects or ebpf.CollectionSpec.LoadAndAssign.
type ParcaPythonObjects struct {
	ParcaPythonPrograms
	ParcaPythonMaps
}

func (o *ParcaPythonObjects) Close() error {
	return _ParcaPythonClose(
		&o.ParcaPythonPrograms,
		&o.ParcaPythonMaps,
	)
}

// ParcaPythonMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadParcaPythonObjects or ebpf.CollectionSpec.LoadAndAssign.
type ParcaPythonMaps struct {
	GlobalState            *ebpf.Map `ebpf:"global_state"`
	Heap                   *ebpf.Map `ebpf:"heap"`
	PidToInterpreterInfo   *ebpf.Map `ebpf:"pid_to_interpreter_info"`
	Programs               *ebpf.Map `ebpf:"programs"`
	StackCounts            *ebpf.Map `ebpf:"stack_counts"`
	StackTraces            *ebpf.Map `ebpf:"stack_traces"`
	SymbolIndexStorage     *ebpf.Map `ebpf:"symbol_index_storage"`
	SymbolTable            *ebpf.Map `ebpf:"symbol_table"`
	VersionSpecificOffsets *ebpf.Map `ebpf:"version_specific_offsets"`
}

func (m *ParcaPythonMaps) Close() error {
	return _ParcaPythonClose(
		m.GlobalState,
		m.Heap,
		m.PidToInterpreterInfo,
		m.Programs,
		m.StackCounts,
		m.StackTraces,
		m.SymbolIndexStorage,
		m.SymbolTable,
		m.VersionSpecificOffsets,
	)
}

// ParcaPythonPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadParcaPythonObjects or ebpf.CollectionSpec.LoadAndAssign.
type ParcaPythonPrograms struct {
	UnwindPythonStack *ebpf.Program `ebpf:"unwind_python_stack"`
	WalkPythonStack   *ebpf.Program `ebpf:"walk_python_stack"`
}

func (p *ParcaPythonPrograms) Close() error {
	return _ParcaPythonClose(
		p.UnwindPythonStack,
		p.WalkPythonStack,
	)
}

func _ParcaPythonClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed parcapython_bpfel_x86.o
var _ParcaPythonBytes []byte
